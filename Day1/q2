Here are clean Java solutions for each of your problems (Q5 to Q8), explained clearly:

---

### âœ… **5. Is Subsequence**

#### âž¤ Problem:

Check if string `s` is a subsequence of string `t`.

#### ðŸ”¹ Java Code:

```java
public class SubsequenceChecker {
    public boolean isSubsequence(String s, String t) {
        int i = 0, j = 0;

        while (i < s.length() && j < t.length()) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }

        return i == s.length();
    }
}
```

#### ðŸ”¹ Follow-up:

If many `s` strings are given, preprocess `t` by mapping each character to a list of its positions (using a `Map<Character, List<Integer>>`), then use binary search to find next positions efficiently.

---

### âœ… **6. Add Strings**

#### âž¤ Problem:

Add two numbers represented as strings without converting to integers or using big integers.

#### ðŸ”¹ Java Code:

```java
public class AddStrings {
    public String addStrings(String num1, String num2) {
        StringBuilder result = new StringBuilder();

        int i = num1.length() - 1, j = num2.length() - 1;
        int carry = 0;

        while (i >= 0 || j >= 0 || carry != 0) {
            int digit1 = (i >= 0) ? num1.charAt(i--) - '0' : 0;
            int digit2 = (j >= 0) ? num2.charAt(j--) - '0' : 0;

            int sum = digit1 + digit2 + carry;
            result.append(sum % 10);
            carry = sum / 10;
        }

        return result.reverse().toString();
    }
}
```

---

### âœ… **7. Number of Segments in a String**

#### âž¤ Problem:

Count the number of words (non-space segments) in a string.

#### ðŸ”¹ Java Code:

```java
public class SegmentCounter {
    public int countSegments(String s) {
        String[] parts = s.trim().split("\\s+");
        return s.trim().isEmpty() ? 0 : parts.length;
    }
}
```

---

### âœ… **8. Detect Capital Usage**

#### âž¤ Problem:

Check if the usage of capitals in a word is valid based on three allowed patterns.

#### ðŸ”¹ Java Code:

```java
public class CapitalUsageChecker {
    public boolean detectCapitalUse(String word) {
        return word.equals(word.toUpperCase()) ||
               word.equals(word.toLowerCase()) ||
               (Character.isUpperCase(word.charAt(0)) && word.substring(1).equals(word.substring(1).toLowerCase()));
    }
}
```

---

Let me know if you need test cases or all of these combined into one program!
,
